#!/bin/bash
# run via tewiba
[ -n "$TEWIBA" ] || exec tewiba -v "$0"

# This function is not in the tewiba code, but is provided to help to compare
# semantic revisions in bash scripts.
# It converts a semantic version into a lexicographically-sortable string
# For instance, if you require at least v1.5.1-beta.4, perform the test:
# [ $(semvers2int $TEWIBA) '>=' $(semvers2int 1.5.1-beta.4) ]
# Limitation: it only understands one pre-release identifier, optionally
# followed by a number. E.g: -alpha, -beta.3, but not -pre.dev

# The code to copy-paste in your tests, maybe in your __INIT__

# converts a Semantic Version string to a lexicographically orderable one
# from: http://colas.nahaboo.net/Software/Tewiba
semvers2int(){
    local v p b d='([[:digit:]]+)' M
    [[ $1 =~ ^$d[.]$d[.]$d(-([[:alnum:]]+)([.][[:digit:]]+)?)?([+]$d)?$ ]]&&\
	M=("${BASH_REMATCH[@]}") || return 1
    v=$(printf '%03d%03d%03d' ${M[1]} ${M[2]} ${M[3]})
    [ -n "${M[5]}" ] && p="-${M[5]}" || p='='
    [ -n "${M[6]}" ] && p="$p"$(printf '%03d' "${M[6]#.}") || p="${p}00"
    [ -n "${M[8]}" ] && b="~"$(printf '%03d' "${M[8]}")
    echo "v$v$p$b"
}

# for instance via statements like: requires_tewiba_version 1.5.0
requires_tewiba_version(){
    test "$(semvers2int $TEWIBA) >= $(semvers2int $1)" || exit 1
}

### Some testing of it

st() { test "$(semvers2int $1) < $(semvers2int $2)";}

DOTEST -l s2i1 -s 0 st 1.1.0 1.1.0+12
DOTEST -l s2i2 -s 0 st 1.1.2+24 1.1.10
DOTEST -l s2i3 -s 0 st 1.1.0-alpha.2 1.1.0-beta.1
DOTEST -l s2i4 -s 0 st 1.1.0-alpha.2 1.1.0
DOTEST -l s2i5 -s 0 st 1.1.0-zeta 1.1.0
DOTEST -l s2i6 -s 0 st 1.1.0-alpha.2+12 1.1.0-beta.1
DOTEST -l s2i7 -s 0 st 1.1.0-alpha.2+45 1.1.0
DOTEST -l s2i8 -s 0 st 1.1.0-zeta+37 1.1.0

TEND
